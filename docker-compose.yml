

services:
  web:
    build: 
      context: ./fake_reviews_detector
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py createsuperuser &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - ./fake_reviews_detector:/app
    ports:
      - "8000:8000"
    env_file: 
      - .env
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started

  celery_worker:
    build: 
      context: ./fake_reviews_detector
      dockerfile: Dockerfile
    command: celery -A fake_reviews_detector.celery_app worker --loglevel=info
    volumes:
      - ./fake_reviews_detector:/app
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - web
      - redis

  celery_beat:
    build: 
      context: ./fake_reviews_detector
      dockerfile: Dockerfile
    command: celery -A fake_reviews_detector.celery_app beat -l INFO
    volumes:
      - ./fake_reviews_detector:/app
    env_file:
      - .env
    networks:
      - app-network
    depends_on:
      - redis
      - web

  redis:
    image: redis:alpine
    volumes:
      - redis_data:/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 3

  db:
    image: postgres:13
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 5

volumes:
  postgres_data:
  redis_data:

networks:
  app-network:
    driver: bridge